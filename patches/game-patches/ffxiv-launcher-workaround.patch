From e41cd49215393ac819b90a1c960f6092d6aa087a Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 29 Nov 2021 09:05:10 -0600
Subject: [PATCH] quartz: Allow time format change while running.

Signed-off-by: Andrew Eikum <aeikum@codeweavers.com>
Signed-off-by: Zebediah Figura <zfigura@codeweavers.com>
Signed-off-by: Alexandre Julliard <julliard@winehq.org>
(cherry picked from commit 0dea2b615e82b51ba3231c493b3c11ee6997446e)
---
 dlls/quartz/filtergraph.c       | 3 ---
 dlls/quartz/tests/filtergraph.c | 6 ++++++
 2 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/dlls/quartz/filtergraph.c b/dlls/quartz/filtergraph.c
index 858e75a628b..bed20a9d98a 100644
--- a/dlls/quartz/filtergraph.c
+++ b/dlls/quartz/filtergraph.c
@@ -2223,9 +2223,6 @@ static HRESULT WINAPI MediaSeeking_SetTimeFormat(IMediaSeeking *iface, const GUI

     TRACE("(%p/%p)->(%s)\n", This, iface, debugstr_guid(pFormat));

-    if (This->state != State_Stopped)
-        return VFW_E_WRONG_STATE;
-
     if (!IsEqualGUID(&TIME_FORMAT_MEDIA_TIME, pFormat))
     {
         FIXME("Unhandled time format %s\n", debugstr_guid(pFormat));
diff --git a/dlls/quartz/tests/filtergraph.c b/dlls/quartz/tests/filtergraph.c
index fef7b972fac..a83bfde0806 100644
--- a/dlls/quartz/tests/filtergraph.c
+++ b/dlls/quartz/tests/filtergraph.c
@@ -4930,6 +4930,12 @@ static void test_graph_seeking(void)
     ok(hr == S_OK, "Got hr %#x.\n", hr);
     ok(time == 6000 * 10000, "Got time %s.\n", wine_dbgstr_longlong(time));

+    hr = IMediaSeeking_SetTimeFormat(seeking, &TIME_FORMAT_MEDIA_TIME);
+    ok(hr == S_OK, "Got hr %#x.\n", hr);
+
+    hr = IMediaSeeking_SetTimeFormat(seeking, &TIME_FORMAT_NONE);
+    todo_wine ok(hr == S_OK, "Got hr %#x.\n", hr);
+
     hr = IMediaControl_Stop(control);
     ok(hr == S_OK, "Got hr %#x.\n", hr);

From ad48fc7d8c4eb757d0ccd359d80542e0a15f65aa Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Wed, 24 Nov 2021 13:35:23 -0600
Subject: [PATCH] wmadmod: Add stub WMA DMO

FFXIV needs this avoid hanging on video playback.

CW-Bug-Id: #19624
---
 configure.ac              |   1 +
 dlls/wmadmod/Makefile.in  |   8 +
 dlls/wmadmod/wmadmod.c    | 745 ++++++++++++++++++++++++++++++++++++++
 dlls/wmadmod/wmadmod.idl  |  28 ++
 dlls/wmadmod/wmadmod.spec |   5 +
 loader/wine.inf.in        |   1 +
 6 files changed, 788 insertions(+)
 create mode 100644 dlls/wmadmod/Makefile.in
 create mode 100644 dlls/wmadmod/wmadmod.c
 create mode 100644 dlls/wmadmod/wmadmod.idl
 create mode 100644 dlls/wmadmod/wmadmod.spec

diff --git a/configure.ac b/configure.ac
index b44686b3931..d2ad48b35a2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3919,6 +3919,7 @@ WINE_CONFIG_MAKEFILE(dlls/wlanapi/tests)
 WINE_CONFIG_MAKEFILE(dlls/wlanui)
 WINE_CONFIG_MAKEFILE(dlls/wldap32)
 WINE_CONFIG_MAKEFILE(dlls/wldap32/tests)
+WINE_CONFIG_MAKEFILE(dlls/wmadmod)
 WINE_CONFIG_MAKEFILE(dlls/wmasf)
 WINE_CONFIG_MAKEFILE(dlls/wmcodecdspuuid)
 WINE_CONFIG_MAKEFILE(dlls/wmi)
diff --git a/dlls/wmadmod/Makefile.in b/dlls/wmadmod/Makefile.in
new file mode 100644
index 00000000000..cffafc953ad
--- /dev/null
+++ b/dlls/wmadmod/Makefile.in
@@ -0,0 +1,8 @@
+MODULE    = wmadmod.dll
+IMPORTS   = dmoguids msdmo ole32 uuid wmcodecdspuuid kernelbase mf
+
+C_SRCS = \
+	wmadmod.c
+
+IDL_SRCS = \
+	wmadmod.idl
diff --git a/dlls/wmadmod/wmadmod.c b/dlls/wmadmod/wmadmod.c
new file mode 100644
index 00000000000..4613554c0d2
--- /dev/null
+++ b/dlls/wmadmod/wmadmod.c
@@ -0,0 +1,745 @@
+/*
+ * WMA decoder DMO
+ *
+ * Copyright 2018 Zebediah Figura
+ * Copyright 2021 Andrew Eikum for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <stdarg.h>
+#include <stdio.h>
+#include <math.h>
+#include "windef.h"
+#include "winbase.h"
+#include "wingdi.h"
+#include "mmreg.h"
+#define COBJMACROS
+#include "objbase.h"
+#include "dmo.h"
+#include "rpcproxy.h"
+#include "wmcodecdsp.h"
+#include "wine/debug.h"
+#include "wine/heap.h"
+
+#include "initguid.h"
+DEFINE_GUID(WMMEDIATYPE_Audio, 0x73647561,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
+DEFINE_GUID(WMMEDIASUBTYPE_WMAudioV8,        0x00000161,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
+DEFINE_GUID(WMMEDIASUBTYPE_WMAudioV9,        0x00000162,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
+DEFINE_GUID(WMMEDIASUBTYPE_WMAudio_Lossless, 0x00000163,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
+DEFINE_GUID(WMMEDIASUBTYPE_PCM,0x00000001,0x0000,0x0010,0x80,0x00,0x00,0xaa,0x00,0x38,0x9b,0x71);
+DEFINE_GUID(WMFORMAT_WaveFormatEx,  0x05589f81,0xc356,0x11ce,0xbf,0x01,0x00,0xaa,0x00,0x55,0x59,0x5a);
+
+WINE_DEFAULT_DEBUG_CHANNEL(wmadmod);
+
+static HINSTANCE wmadmod_instance;
+
+struct wma_decoder
+{
+    IUnknown IUnknown_inner;
+    IMediaObject IMediaObject_iface;
+    IPropertyBag IPropertyBag_iface;
+    IUnknown *outer;
+    LONG ref;
+    float theta;
+
+    DMO_MEDIA_TYPE intype, outtype;
+    BOOL intype_set, outtype_set;
+
+    IMediaBuffer *buffer;
+    REFERENCE_TIME timestamp;
+};
+
+static inline struct wma_decoder *impl_from_IUnknown(IUnknown *iface)
+{
+    return CONTAINING_RECORD(iface, struct wma_decoder, IUnknown_inner);
+}
+
+static HRESULT WINAPI Unknown_QueryInterface(IUnknown *iface, REFIID iid, void **obj)
+{
+    struct wma_decoder *This = impl_from_IUnknown(iface);
+
+    TRACE("(%p)->(%s, %p)\n", This, debugstr_guid(iid), obj);
+
+    if (IsEqualGUID(iid, &IID_IUnknown))
+        *obj = &This->IUnknown_inner;
+    else if (IsEqualGUID(iid, &IID_IMediaObject))
+        *obj = &This->IMediaObject_iface;
+    else if (IsEqualGUID(iid, &IID_IPropertyBag))
+        *obj = &This->IPropertyBag_iface;
+    else
+    {
+        FIXME("no interface for %s\n", debugstr_guid(iid));
+        *obj = NULL;
+        return E_NOINTERFACE;
+    }
+
+    IUnknown_AddRef((IUnknown *)*obj);
+    return S_OK;
+}
+
+static ULONG WINAPI Unknown_AddRef(IUnknown *iface)
+{
+    struct wma_decoder *This = impl_from_IUnknown(iface);
+    ULONG refcount = InterlockedIncrement(&This->ref);
+
+    TRACE("(%p) AddRef from %d\n", This, refcount - 1);
+
+    return refcount;
+}
+
+static ULONG WINAPI Unknown_Release(IUnknown *iface)
+{
+    struct wma_decoder *This = impl_from_IUnknown(iface);
+    ULONG refcount = InterlockedDecrement(&This->ref);
+
+    TRACE("(%p) Release from %d\n", This, refcount + 1);
+
+    if (!refcount)
+    {
+        if (This->buffer)
+            IMediaBuffer_Release(This->buffer);
+        if (This->intype_set)
+            MoFreeMediaType(&This->intype);
+        MoFreeMediaType(&This->outtype);
+        heap_free(This);
+    }
+    return refcount;
+}
+
+static const IUnknownVtbl Unknown_vtbl = {
+    Unknown_QueryInterface,
+    Unknown_AddRef,
+    Unknown_Release,
+};
+
+static inline struct wma_decoder *impl_from_IMediaObject(IMediaObject *iface)
+{
+    return CONTAINING_RECORD(iface, struct wma_decoder, IMediaObject_iface);
+}
+
+static HRESULT WINAPI MediaObject_QueryInterface(IMediaObject *iface, REFIID iid, void **obj)
+{
+    struct wma_decoder *This = impl_from_IMediaObject(iface);
+    return IUnknown_QueryInterface(This->outer, iid, obj);
+}
+
+static ULONG WINAPI MediaObject_AddRef(IMediaObject *iface)
+{
+    struct wma_decoder *This = impl_from_IMediaObject(iface);
+    return IUnknown_AddRef(This->outer);
+}
+
+static ULONG WINAPI MediaObject_Release(IMediaObject *iface)
+{
+    struct wma_decoder *This = impl_from_IMediaObject(iface);
+    return IUnknown_Release(This->outer);
+}
+
+static HRESULT WINAPI MediaObject_GetStreamCount(IMediaObject *iface, DWORD *input, DWORD *output)
+{
+    TRACE("iface %p, input %p, output %p.\n", iface, input, output);
+
+    *input = *output = 1;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_GetInputStreamInfo(IMediaObject *iface, DWORD index, DWORD *flags)
+{
+    TRACE("iface %p, index %u, flags %p.\n", iface, index, flags);
+
+    *flags = 0;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_GetOutputStreamInfo(IMediaObject *iface, DWORD index, DWORD *flags)
+{
+    TRACE("iface %p, index %u, flags %p.\n", iface, index, flags);
+
+    *flags = 0;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_GetInputType(IMediaObject *iface, DWORD index, DWORD type_index, DMO_MEDIA_TYPE *type)
+{
+    TRACE("iface %p, index %u, type_index %u, type %p.\n", iface, index, type_index, type);
+
+    if (type_index >= 3)
+        return DMO_E_NO_MORE_ITEMS;
+
+    type->majortype = WMMEDIATYPE_Audio;
+    switch(type_index){
+    case 0:
+        type->subtype = WMMEDIASUBTYPE_WMAudioV8;
+        break;
+    case 1:
+        type->subtype = WMMEDIASUBTYPE_WMAudioV9;
+        break;
+    case 2:
+        type->subtype = WMMEDIASUBTYPE_WMAudio_Lossless;
+        break;
+    }
+    type->formattype = GUID_NULL;
+    type->pUnk = NULL;
+    type->cbFormat = 0;
+    type->pbFormat = NULL;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_GetOutputType(IMediaObject *iface, DWORD index, DWORD type_index, DMO_MEDIA_TYPE *type)
+{
+    struct wma_decoder *dmo = impl_from_IMediaObject(iface);
+    const WAVEFORMATEX *input_format;
+    WAVEFORMATEX *format;
+
+    TRACE("iface %p, index %u, type_index %u, type %p.\n", iface, index, type_index, type);
+
+    if (!dmo->intype_set)
+        return DMO_E_TYPE_NOT_SET;
+
+    input_format = (WAVEFORMATEX *)dmo->intype.pbFormat;
+
+    if (type_index >= (input_format->nChannels == 1 ? 2 : 4))
+        return DMO_E_NO_MORE_ITEMS;
+
+    type->majortype = WMMEDIATYPE_Audio;
+    type->subtype = WMMEDIASUBTYPE_PCM;
+    type->formattype = WMFORMAT_WaveFormatEx;
+    type->pUnk = NULL;
+    type->cbFormat = sizeof(WAVEFORMATEX);
+    if (!(type->pbFormat = CoTaskMemAlloc(sizeof(WAVEFORMATEX))))
+        return E_OUTOFMEMORY;
+    format = (WAVEFORMATEX *)type->pbFormat;
+    format->wFormatTag = WAVE_FORMAT_PCM;
+    format->nSamplesPerSec = input_format->nSamplesPerSec;
+    format->nChannels = (type_index / 2) ? 1 : input_format->nChannels;
+    format->wBitsPerSample = (type_index % 2) ? 8 : 16;
+    format->nBlockAlign = format->nChannels * format->wBitsPerSample / 8;
+    format->nAvgBytesPerSec = format->nSamplesPerSec * format->nBlockAlign;
+    format->cbSize = 0;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_SetInputType(IMediaObject *iface, DWORD index, const DMO_MEDIA_TYPE *type, DWORD flags)
+{
+    struct wma_decoder *dmo = impl_from_IMediaObject(iface);
+
+    TRACE("iface %p, index %u, type %p, flags %#x.\n", iface, index, type, flags);
+
+    if (flags & DMO_SET_TYPEF_CLEAR)
+    {
+        if (dmo->intype_set)
+            MoFreeMediaType(&dmo->intype);
+        dmo->intype_set = FALSE;
+        return S_OK;
+    }
+
+    if (!IsEqualGUID(&type->majortype, &WMMEDIATYPE_Audio)
+            || !IsEqualGUID(&type->subtype, &WMMEDIASUBTYPE_WMAudioV8)
+            || !IsEqualGUID(&type->subtype, &WMMEDIASUBTYPE_WMAudioV9)
+            || !IsEqualGUID(&type->subtype, &WMMEDIASUBTYPE_WMAudio_Lossless)
+            || !IsEqualGUID(&type->formattype, &WMFORMAT_WaveFormatEx))
+        return DMO_E_TYPE_NOT_ACCEPTED;
+
+    if (!(flags & DMO_SET_TYPEF_TEST_ONLY))
+    {
+        if (dmo->intype_set)
+            MoFreeMediaType(&dmo->intype);
+        MoCopyMediaType(&dmo->intype, type);
+        dmo->intype_set = TRUE;
+    }
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_SetOutputType(IMediaObject *iface, DWORD index, const DMO_MEDIA_TYPE *type, DWORD flags)
+{
+    struct wma_decoder *This = impl_from_IMediaObject(iface);
+
+    TRACE("(%p)->(%d, %p, %#x)\n", iface, index, type, flags);
+
+    if (flags & DMO_SET_TYPEF_CLEAR)
+    {
+        MoFreeMediaType(&This->outtype);
+        This->outtype_set = FALSE;
+        return S_OK;
+    }
+
+    if (!IsEqualGUID(&type->formattype, &WMFORMAT_WaveFormatEx))
+        return DMO_E_TYPE_NOT_ACCEPTED;
+
+    if (!(flags & DMO_SET_TYPEF_TEST_ONLY))
+    {
+        MoCopyMediaType(&This->outtype, type);
+        This->outtype_set = TRUE;
+    }
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_GetInputCurrentType(IMediaObject *iface, DWORD index, DMO_MEDIA_TYPE *type)
+{
+    FIXME("(%p)->(%d, %p) stub!\n", iface, index, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI MediaObject_GetOutputCurrentType(IMediaObject *iface, DWORD index, DMO_MEDIA_TYPE *type)
+{
+    FIXME("(%p)->(%d, %p) stub!\n", iface, index, type);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI MediaObject_GetInputSizeInfo(IMediaObject *iface,
+        DWORD index, DWORD *size, DWORD *lookahead, DWORD *alignment)
+{
+    struct wma_decoder *dmo = impl_from_IMediaObject(iface);
+
+    TRACE("iface %p, index %u, size %p, lookahead %p, alignment %p.\n", iface, index, size, lookahead, alignment);
+
+    if (!dmo->intype_set || !dmo->outtype_set)
+        return DMO_E_TYPE_NOT_SET;
+
+    *size = 0;
+    *alignment = 1;
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_GetOutputSizeInfo(IMediaObject *iface, DWORD index, DWORD *size, DWORD *alignment)
+{
+    struct wma_decoder *dmo = impl_from_IMediaObject(iface);
+
+    TRACE("iface %p, index %u, size %p, alignment %p.\n", iface, index, size, alignment);
+
+    if (!dmo->intype_set || !dmo->outtype_set)
+        return DMO_E_TYPE_NOT_SET;
+
+    *size = 2 * 1152 * ((WAVEFORMATEX *)dmo->outtype.pbFormat)->wBitsPerSample / 8;
+    *alignment = 1;
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_GetInputMaxLatency(IMediaObject *iface, DWORD index, REFERENCE_TIME *latency)
+{
+    FIXME("(%p)->(%d, %p) stub!\n", iface, index, latency);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI MediaObject_SetInputMaxLatency(IMediaObject *iface, DWORD index, REFERENCE_TIME latency)
+{
+    FIXME("(%p)->(%d, %s) stub!\n", iface, index, wine_dbgstr_longlong(latency));
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI MediaObject_Flush(IMediaObject *iface)
+{
+    struct wma_decoder *dmo = impl_from_IMediaObject(iface);
+
+    TRACE("iface %p.\n", iface);
+
+    if (dmo->buffer)
+        IMediaBuffer_Release(dmo->buffer);
+    dmo->buffer = NULL;
+    dmo->timestamp = 0;
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_Discontinuity(IMediaObject *iface, DWORD index)
+{
+    TRACE("iface %p.\n", iface);
+
+    return S_OK;
+}
+
+static HRESULT WINAPI MediaObject_AllocateStreamingResources(IMediaObject *iface)
+{
+    FIXME("(%p)->() stub!\n", iface);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI MediaObject_FreeStreamingResources(IMediaObject *iface)
+{
+    FIXME("(%p)->() stub!\n", iface);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI MediaObject_GetInputStatus(IMediaObject *iface, DWORD index, DWORD *flags)
+{
+    FIXME("(%p)->(%d, %p) stub!\n", iface, index, flags);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI MediaObject_ProcessInput(IMediaObject *iface, DWORD index,
+    IMediaBuffer *buffer, DWORD flags, REFERENCE_TIME timestamp, REFERENCE_TIME timelength)
+{
+    struct wma_decoder *This = impl_from_IMediaObject(iface);
+    HRESULT hr;
+    BYTE *data;
+    DWORD len;
+
+    TRACE("(%p)->(%d, %p, %#x, %s, %s)\n", iface, index, buffer, flags,
+          wine_dbgstr_longlong(timestamp), wine_dbgstr_longlong(timelength));
+
+    if (This->buffer)
+    {
+        ERR("Already have a buffer.\n");
+        return DMO_E_NOTACCEPTING;
+    }
+
+    IMediaBuffer_AddRef(buffer);
+    This->buffer = buffer;
+
+    hr = IMediaBuffer_GetBufferAndLength(buffer, &data, &len);
+    if (FAILED(hr))
+        return hr;
+
+    return S_OK;
+}
+
+static DWORD get_framesize(DMO_MEDIA_TYPE *type)
+{
+    WAVEFORMATEX *format = (WAVEFORMATEX *)type->pbFormat;
+    return 1152 * format->nBlockAlign;
+}
+
+static REFERENCE_TIME get_frametime(DMO_MEDIA_TYPE *type)
+{
+    WAVEFORMATEX *format = (WAVEFORMATEX *)type->pbFormat;
+    return (REFERENCE_TIME) 10000000 * 1152 / format->nSamplesPerSec;
+}
+
+static HRESULT WINAPI MediaObject_ProcessOutput(IMediaObject *iface, DWORD flags, DWORD count, DMO_OUTPUT_DATA_BUFFER *buffers, DWORD *status)
+{
+    struct wma_decoder *This = impl_from_IMediaObject(iface);
+    REFERENCE_TIME time = 0, frametime;
+    DWORD len, maxlen, framesize;
+    int got_data = 0;
+    HRESULT hr;
+    BYTE *data;
+    const WAVEFORMATEX *input_format = (WAVEFORMATEX *)This->intype.pbFormat;
+    const WAVEFORMATEX *output_format = (WAVEFORMATEX *)This->outtype.pbFormat;
+
+    TRACE("(%p)->(%#x, %d, %p, %p)\n", iface, flags, count, buffers, status);
+
+    if (count > 1)
+        FIXME("Multiple buffers not handled.\n");
+
+    buffers[0].dwStatus = 0;
+
+    if (!This->buffer)
+        return S_FALSE;
+
+    buffers[0].dwStatus |= DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT;
+
+    hr = IMediaBuffer_GetBufferAndLength(buffers[0].pBuffer, &data, &len);
+    if (FAILED(hr)) return hr;
+
+    hr = IMediaBuffer_GetMaxLength(buffers[0].pBuffer, &maxlen);
+    if (FAILED(hr)) return hr;
+
+    framesize = get_framesize(&This->outtype);
+    frametime = get_frametime(&This->outtype);
+
+    while (1)
+    {
+        int i, c;
+        if (maxlen - len < framesize)
+        {
+            buffers[0].dwStatus |= DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE;
+            break;
+        }
+
+        for(i = 0; i < framesize; ++i){
+            float v = sinf(This->theta);
+            if (output_format->wBitsPerSample == 8) {
+                unsigned char iv = (unsigned char)(v * 255);
+                for(c = 0; c < input_format->nChannels; ++c){
+                    *((unsigned char *)(data + len) + c) = iv;
+                }
+            }else if(output_format->wBitsPerSample == 16){
+                signed short iv = (signed short)(v * 32767);
+                for(c = 0; c < input_format->nChannels; ++c){
+                    *((signed short *)(data + len) + c) = iv;
+                }
+            }else
+                ERR("unsupported BPS: %u\n", output_format->wBitsPerSample);
+
+#define HZ 0 /* generate a tone at this req (e.g. 440) */
+
+            This->theta += (HZ / (float)output_format->nSamplesPerSec) * 2 * M_PI;
+            while(This->theta > 2 * M_PI)
+                This->theta -= 2 * M_PI;
+        }
+
+        got_data = 1;
+
+        len += framesize;
+        hr = IMediaBuffer_SetLength(buffers[0].pBuffer, len);
+        if (FAILED(hr)) return hr;
+
+        time += frametime;
+    }
+
+    if (got_data)
+    {
+        buffers[0].dwStatus |= (DMO_OUTPUT_DATA_BUFFERF_TIME | DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH);
+        buffers[0].rtTimelength = time;
+        buffers[0].rtTimestamp = This->timestamp;
+        This->timestamp += time;
+        return S_OK;
+    }
+    return S_FALSE;
+}
+
+static HRESULT WINAPI MediaObject_Lock(IMediaObject *iface, LONG lock)
+{
+    FIXME("(%p)->(%d) stub!\n", iface, lock);
+
+    return E_NOTIMPL;
+}
+
+static const IMediaObjectVtbl MediaObject_vtbl = {
+    MediaObject_QueryInterface,
+    MediaObject_AddRef,
+    MediaObject_Release,
+    MediaObject_GetStreamCount,
+    MediaObject_GetInputStreamInfo,
+    MediaObject_GetOutputStreamInfo,
+    MediaObject_GetInputType,
+    MediaObject_GetOutputType,
+    MediaObject_SetInputType,
+    MediaObject_SetOutputType,
+    MediaObject_GetInputCurrentType,
+    MediaObject_GetOutputCurrentType,
+    MediaObject_GetInputSizeInfo,
+    MediaObject_GetOutputSizeInfo,
+    MediaObject_GetInputMaxLatency,
+    MediaObject_SetInputMaxLatency,
+    MediaObject_Flush,
+    MediaObject_Discontinuity,
+    MediaObject_AllocateStreamingResources,
+    MediaObject_FreeStreamingResources,
+    MediaObject_GetInputStatus,
+    MediaObject_ProcessInput,
+    MediaObject_ProcessOutput,
+    MediaObject_Lock,
+};
+
+static inline struct wma_decoder *impl_from_IPropertyBag(IPropertyBag *iface)
+{
+    return CONTAINING_RECORD(iface, struct wma_decoder, IPropertyBag_iface);
+}
+
+static HRESULT WINAPI PropertyBag_QueryInterface(IPropertyBag *iface,
+        REFIID riid, void **ppvObject)
+{
+    struct wma_decoder *This = impl_from_IPropertyBag(iface);
+    return IUnknown_QueryInterface(This->outer, riid, ppvObject);
+}
+
+static ULONG WINAPI PropertyBag_AddRef(IPropertyBag *iface)
+{
+    struct wma_decoder *This = impl_from_IPropertyBag(iface);
+    return IUnknown_AddRef(This->outer);
+}
+
+static ULONG WINAPI PropertyBag_Release(IPropertyBag *iface)
+{
+    struct wma_decoder *This = impl_from_IPropertyBag(iface);
+    return IUnknown_Release(This->outer);
+}
+
+static HRESULT WINAPI PropertyBag_Read(IPropertyBag *iface,
+        LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog)
+{
+    struct wma_decoder *This = impl_from_IPropertyBag(iface);
+    FIXME("%p %s\n", This, wine_dbgstr_w(pszPropName));
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI PropertyBag_Write(IPropertyBag *iface,
+        LPCOLESTR pszPropName, VARIANT *pVar)
+{
+    struct wma_decoder *This = impl_from_IPropertyBag(iface);
+    FIXME("%p %s\n", This, wine_dbgstr_w(pszPropName));
+    return S_OK;
+}
+
+static const IPropertyBagVtbl PropertyBag_vtbl = {
+    PropertyBag_QueryInterface,
+    PropertyBag_AddRef,
+    PropertyBag_Release,
+    PropertyBag_Read,
+    PropertyBag_Write
+};
+
+static HRESULT create_wma_decoder(IUnknown *outer, REFIID iid, void **obj)
+{
+    struct wma_decoder *This;
+    HRESULT hr;
+
+    if (!(This = heap_alloc_zero(sizeof(*This))))
+        return E_OUTOFMEMORY;
+
+    This->IUnknown_inner.lpVtbl = &Unknown_vtbl;
+    This->IMediaObject_iface.lpVtbl = &MediaObject_vtbl;
+    This->IPropertyBag_iface.lpVtbl = &PropertyBag_vtbl;
+    This->ref = 1;
+    This->outer = outer ? outer : &This->IUnknown_inner;
+
+    hr = IUnknown_QueryInterface(&This->IUnknown_inner, iid, obj);
+    IUnknown_Release(&This->IUnknown_inner);
+    return hr;
+}
+
+static HRESULT WINAPI ClassFactory_QueryInterface(IClassFactory *iface, REFIID iid, void **obj)
+{
+    TRACE("(%p, %s, %p)\n", iface, debugstr_guid(iid), obj);
+
+    if (IsEqualGUID(&IID_IUnknown, iid) ||
+        IsEqualGUID(&IID_IClassFactory, iid))
+    {
+        IClassFactory_AddRef(iface);
+        *obj = iface;
+        return S_OK;
+    }
+
+    *obj = NULL;
+    WARN("no interface for %s\n", debugstr_guid(iid));
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI ClassFactory_AddRef(IClassFactory *iface)
+{
+    return 2;
+}
+
+static ULONG WINAPI ClassFactory_Release(IClassFactory *iface)
+{
+    return 1;
+}
+
+static HRESULT WINAPI ClassFactory_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID iid, void **obj)
+{
+    TRACE("(%p, %s, %p)\n", outer, debugstr_guid(iid), obj);
+
+    if (outer && !IsEqualGUID(iid, &IID_IUnknown))
+    {
+        *obj = NULL;
+        return E_NOINTERFACE;
+    }
+
+    return create_wma_decoder(outer, iid, obj);
+}
+
+static HRESULT WINAPI ClassFactory_LockServer(IClassFactory *iface, BOOL lock)
+{
+    FIXME("(%d) stub\n", lock);
+    return S_OK;
+}
+
+static const IClassFactoryVtbl classfactory_vtbl = {
+    ClassFactory_QueryInterface,
+    ClassFactory_AddRef,
+    ClassFactory_Release,
+    ClassFactory_CreateInstance,
+    ClassFactory_LockServer
+};
+
+static IClassFactory wma_decoder_cf = { &classfactory_vtbl };
+
+BOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, LPVOID reserved)
+{
+    TRACE("%p, %d, %p\n", instance, reason, reserved);
+    switch (reason)
+    {
+    case DLL_PROCESS_ATTACH:
+        DisableThreadLibraryCalls(instance);
+        wmadmod_instance = instance;
+        break;
+    }
+    return TRUE;
+}
+
+/*************************************************************************
+ *              DllGetClassObject (DSDMO.@)
+ */
+HRESULT WINAPI DllGetClassObject(REFCLSID clsid, REFIID iid, void **obj)
+{
+    TRACE("%s, %s, %p\n", debugstr_guid(clsid), debugstr_guid(iid), obj);
+
+    if (IsEqualGUID(clsid, &CLSID_CWMADecMediaObject))
+        return IClassFactory_QueryInterface(&wma_decoder_cf, iid, obj);
+
+    FIXME("class %s not available\n", debugstr_guid(clsid));
+    return CLASS_E_CLASSNOTAVAILABLE;
+}
+
+/******************************************************************
+ *              DllCanUnloadNow (DSDMO.@)
+ */
+HRESULT WINAPI DllCanUnloadNow(void)
+{
+    return S_FALSE;
+}
+
+/***********************************************************************
+ *              DllRegisterServer (DSDMO.@)
+ */
+HRESULT WINAPI DllRegisterServer(void)
+{
+    static const WCHAR nameW[] = {'W','M','A',' ','D','e','c','o','d','e','r',' ','D','M','O',0};
+    DMO_PARTIAL_MEDIATYPE in[3], out;
+    HRESULT hr;
+
+    in[0].type = WMMEDIATYPE_Audio;
+    in[0].subtype = WMMEDIASUBTYPE_WMAudioV8;
+    in[1].type = WMMEDIATYPE_Audio;
+    in[1].subtype = WMMEDIASUBTYPE_WMAudioV9;
+    in[2].type = WMMEDIATYPE_Audio;
+    in[2].subtype = WMMEDIASUBTYPE_WMAudio_Lossless;
+    out.type = WMMEDIATYPE_Audio;
+    out.subtype = WMMEDIASUBTYPE_PCM;
+    hr = DMORegister(nameW, &CLSID_CWMADecMediaObject, &DMOCATEGORY_AUDIO_DECODER,
+        0, 1, in, ARRAY_SIZE(in), &out);
+    if (FAILED(hr)) return hr;
+
+    return __wine_register_resources();
+}
+
+/***********************************************************************
+ *              DllUnregisterServer (DSDMO.@)
+ */
+HRESULT WINAPI DllUnregisterServer(void)
+{
+    HRESULT hr;
+
+    hr = DMOUnregister(&CLSID_CWMADecMediaObject, &DMOCATEGORY_AUDIO_DECODER);
+    if (FAILED(hr)) return hr;
+
+    return __wine_unregister_resources();
+}
diff --git a/dlls/wmadmod/wmadmod.idl b/dlls/wmadmod/wmadmod.idl
new file mode 100644
index 00000000000..105efdbbcea
--- /dev/null
+++ b/dlls/wmadmod/wmadmod.idl
@@ -0,0 +1,28 @@
+/*
+ * WMA decoder DMO
+ *
+ * Copyright 2018 Zebediah Figura
+ * Copyright 2021 Andrew Eikum for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#pragma makedep register
+
+[
+    threading(both),
+    uuid(2eeb4adf-4578-4d10-bca7-bb955f56320a)
+]
+coclass CWMADecMediaObject { interface IMediaObject; }
diff --git a/dlls/wmadmod/wmadmod.spec b/dlls/wmadmod/wmadmod.spec
new file mode 100644
index 00000000000..25104058c7d
--- /dev/null
+++ b/dlls/wmadmod/wmadmod.spec
@@ -0,0 +1,5 @@
+@ stub CreateInstance
+@ stdcall -private DllCanUnloadNow()
+@ stdcall -private DllGetClassObject(ptr ptr ptr)
+@ stdcall -private DllRegisterServer()
+@ stdcall -private DllUnregisterServer()
diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 6e6e23e7fa0..70ba95e5b13 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -2606,6 +2606,7 @@ HKLM,%CurrentVersion%\Telephony\Country List\998,"SameAreaRule",,"G"
 11,,wineqtdecoder.dll,1
 11,,winevulkan.dll,1
 11,,wintrust.dll,1
+11,,wmadmod.dll,1
 11,,iexplore.exe,1

 ; 32bit-only fake dlls
From ca5d9fa411ed3f06867ba823a02a8dbcd94638f9 Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Mon, 18 Feb 2019 18:00:06 +0100
Subject: [PATCH] mshtml HACK: Use super_navigate for javascript: navigation.

For old-style FFXIV launcher crash.

CW-Bug-Id: #19624
---
 dlls/mshtml/navigate.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/dlls/mshtml/navigate.c b/dlls/mshtml/navigate.c
index 233f58c89fd..dc12b0160fc 100644
--- a/dlls/mshtml/navigate.c
+++ b/dlls/mshtml/navigate.c
@@ -2397,6 +2397,7 @@ static HRESULT navigate_uri(HTMLOuterWindow *window, IUri *uri, const WCHAR *dis
         DWORD post_data_len = request_data ? request_data->post_data_len : 0;
         void *post_data = post_data_len ? request_data->post_data : NULL;
         const WCHAR *headers = request_data ? request_data->headers : NULL;
+        DWORD scheme;

         if(!(flags & BINDING_REFRESH)) {
             BSTR frame_name = NULL;
@@ -2419,6 +2420,12 @@ static HRESULT navigate_uri(HTMLOuterWindow *window, IUri *uri, const WCHAR *dis

         if(is_main_content_window(window))
             return super_navigate(window, uri, flags, headers, post_data, post_data_len);
+
+        hres = IUri_GetScheme(uri, &scheme);
+        if(SUCCEEDED(hres) && scheme == URL_SCHEME_JAVASCRIPT) {
+            FIXME("HACK Using super_navigate for javascript: navigation\n");
+            return super_navigate(window, uri, flags, headers, post_data, post_data_len);
+        }
     }

     if(is_main_content_window(window)) {
